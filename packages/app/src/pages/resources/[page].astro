---
import { format } from 'date-fns';
import { getRuntime } from '@astrojs/cloudflare/runtime';

import Layout from '../../layouts/Layout.astro';
import Pagination from '../../components/Pagination.astro';
import ResourceTable from '../../components/ResourceTable.astro';

import { Env } from '../../env';
import { fansubs, QueryType } from '../../constant';
import { wfetch, fetchResources } from '../../fetch';

const { page: _page } = Astro.params;
const page = _page ? +_page : 1;

const url = Astro.url;
const publisher = url.searchParams.get('publisher');
const fansub = url.searchParams.get('fansub');
const fansubItem = fansubs.find((f) => String(f.id) === fansub);

const _type = url.searchParams.get('type');
const type = _type && _type in QueryType ? QueryType[_type] : _type;

const _after = url.searchParams.get('after');
const after = _after ? new Date(_after) : undefined;
const _before = url.searchParams.get('before');
const before = _before ? new Date(_before) : undefined;

const _search = url.searchParams.get('search');
const search: string[] | undefined = _search ? JSON.parse(_search) : undefined;

const _include = url.searchParams.get('include');
const include: (string | string[])[] | undefined = _include ? JSON.parse(_include) : undefined;
const isComplicated = include?.some((i) => Array.isArray(i)) ?? false;

const _exclude = url.searchParams.get('exclude');
const exclude: string[] | undefined = _exclude ? JSON.parse(_exclude) : undefined;

const runtime = getRuntime<Env>(Astro.request);

const { resources, search: searchParams } = await fetchResources(page, {
  fetch: wfetch(runtime?.env?.worker),
  publisher: publisher ? +publisher : undefined,
  fansub: fansub ? +fansub : undefined,
  type: type ? type : undefined,
  search,
  include,
  exclude,
  after,
  before
});

const keywords = {
  search: searchParams ? removeQuote(searchParams.search) : [...(search ?? [])],
  include: searchParams ? searchParams.include : [...(include ?? [])],
  exclude: searchParams ? searchParams.exclude : [...(exclude ?? [])]
};

function removeQuote(words: string[]) {
  return words.map((w) => w.replace(/^(\+|-)?"([^"]*)"$/, '$1$2'));
}
---

<Layout title="所有资源 | Anime Garden">
  <div class="mt-4vh w-full">
    {
      (search || include || before || after || fansubItem) && (
        <>
          <div class="mb4 p4 w-full bg-gray-100 rounded-md space-y-2">
            {fansubItem && (
              <div class="space-x-2 select-none text-0">
                <span class="text-4 text-base-800 font-bold inline-block mr2">字幕组</span>
                <a
                  href={`/resources/1?fansub=${fansubItem.id}`}
                  class="text-4 select-text text-link"
                >
                  {fansubItem.name}
                </a>
              </div>
            )}
            {after && (
              <div class="space-x-2 select-none text-0">
                <span class="text-4 text-base-800 font-bold inline-block mr2">搜索开始于</span>
                <span class="text-4 select-text">{format(after, 'yyyy 年 M 月 d 日 hh:mm')}</span>
              </div>
            )}
            {before && (
              <div class="space-x-2 select-none text-0">
                <span class="text-4 text-base-800 font-bold inline-block mr2">搜索结束于</span>
                <span class="text-4 select-text">{format(before, 'yyyy 年 M 月 d 日 hh:mm')}</span>
              </div>
            )}
            {keywords.search.length > 0 && (
              <div class="space-x-2 text-0">
                {/* prettier-ignore */}
                <span class="text-4 select-none text-base-800 font-bold mr2 inline-block">模糊匹配</span>
                {keywords.search.map((i) => (
                  <span class="text-4 select-text underline underline-dotted underline-gray-500">
                    {i}
                  </span>
                ))}
              </div>
            )}
            {keywords.include.length > 0 && (
              <div class="space-x-2 select-none text-0">
                <span class="text-4 text-base-800 font-bold inline-block mr2">包含关键词</span>
                {keywords.include.map((i, idx) => (
                  <>
                    {idx > 0 && isComplicated && <span class="text-4 text-base-500">+</span>}
                    {Array.isArray(i) ? (
                      <>
                        {keywords.include.length > 1 && i.length > 1 && (
                          <span class="text-4 text-base-500">&#40;</span>
                        )}
                        {i.map((t, idx) => (
                          <>
                            {idx > 0 && <span class="text-4 text-base-500 mx1">|</span>}
                            {/* prettier-ignore */}
                            <span class="text-4 select-text underline underline-dotted underline-gray-500">{t}</span>
                          </>
                        ))}
                        {keywords.include.length > 1 && i.length > 1 && (
                          <span class="text-4 text-base-500">&#41;</span>
                        )}
                      </>
                    ) : (
                      <>
                        {/* prettier-ignore */}
                        <span class="text-4 select-text underline underline-dotted underline-gray-500">{i}</span>
                      </>
                    )}
                  </>
                ))}
              </div>
            )}
            {keywords.exclude.length > 0 && (
              <div class="space-x-2 text-0">
                {/* prettier-ignore */}
                <span class="text-4 select-none text-base-800 font-bold mr2 inline-block">排除关键词</span>
                {keywords.exclude.map((i) => (
                  <span class="text-4 select-text">{i}</span>
                ))}
              </div>
            )}
          </div>
        </>
      )
    }
    <ResourceTable resources={resources} />
    <Pagination page={page} href={(page) => `/resources/${page}${url.search}`} />
  </div>
</Layout>
