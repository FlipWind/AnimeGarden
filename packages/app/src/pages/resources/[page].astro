---
import { format } from 'date-fns';
import { ResourceType, findFansub, parseSearchURL } from 'animegarden';

import Layout from '../../layouts/Layout.astro';
import Pagination from '../../components/Pagination.astro';
import ResourceTable from '../../components/ResourceTable.astro';

import { wfetch, fetchResources } from '../../fetch';
import { getRuntimeEnv, removeQuote } from '../../utils';
import { DisplayType, DisplayTypeColor, QueryType } from '../../constant';

const { page: _page } = Astro.params;
const page = _page ? +_page : 1;

const url = Astro.url;
const params = parseSearchURL(url.searchParams, { pageSize: 80 });

const publisherId = params.publisherId;
const fansubId = params.fansubId;
const fansub = fansubId ? fansubId.map((id) => findFansub(id)).filter(Boolean) : undefined;

const type = (params.type && params.type in QueryType ? QueryType[params.type] : params.type) as
  | ResourceType
  | undefined;
const after = params.after;
const before = params.before;

const search = params.search;
const include = params.include;
const isComplicated = include?.some((i) => Array.isArray(i)) ?? false;
const exclude = params.exclude;

const env = getRuntimeEnv(Astro.locals);

const {
  ok,
  complete,
  resources,
  filter: searchParams,
  timestamp
} = await fetchResources(
  page,
  { ...params },
  {
    fetch: wfetch(env?.worker)
  }
);

const keywords = {
  search: searchParams?.search ? removeQuote(searchParams.search) : [...(search ?? [])],
  include: searchParams?.include ? searchParams.include : [...(include ?? [])],
  exclude: searchParams?.exclude ? searchParams.exclude : [...(exclude ?? [])]
};
---

<Layout title="所有资源 | Anime Garden" timestamp={timestamp}>
  <div class="mt-4vh w-full">
    {
      ok ? (
        <>
          {(type || search || include || before || after || fansub) && (
            <>
              <div class="mb4 p4 w-full bg-gray-100 rounded-md space-y-2">
                {type && (
                  <div class="space-x-2 select-none text-0">
                    <span class="text-4 text-base-800 font-bold mr2 keyword">类型</span>
                    <span class={`text-4 select-text text-base-600 ${DisplayTypeColor[type]}`}>
                      {type in DisplayType ? DisplayType[type] : type}
                    </span>
                  </div>
                )}
                {fansub && (
                  <div class="space-x-2 select-none text-0">
                    <span class="text-4 text-base-800 font-bold mr2 keyword">字幕组</span>
                    {fansub.map((fansub) => (
                      <a
                        href={`/resources/1?fansubId=${fansub.id}`}
                        class="text-4 select-text text-link"
                      >
                        {fansub.name}
                      </a>
                    ))}
                  </div>
                )}
                {after && (
                  <div class="space-x-2 select-none text-0">
                    <span class="text-4 text-base-800 font-bold mr2 keyword">搜索开始于</span>
                    <span class="text-4 select-text">
                      {format(after, 'yyyy 年 M 月 d 日 hh:mm')}
                    </span>
                  </div>
                )}
                {before && (
                  <div class="space-x-2 select-none text-0">
                    <span class="text-4 text-base-800 font-bold mr2 keyword">搜索结束于</span>
                    <span class="text-4 select-text">
                      {format(before, 'yyyy 年 M 月 d 日 hh:mm')}
                    </span>
                  </div>
                )}
                {keywords.search.length > 0 && (
                  <div class="space-x-2 text-0">
                    {/* prettier-ignore */}
                    <span class="text-4 select-none text-base-800 font-bold mr2 keyword">模糊匹配</span>
                    {keywords.search.map((i) => (
                      <span class="text-4 select-text underline underline-dotted underline-gray-500">
                        {i}
                      </span>
                    ))}
                  </div>
                )}
                {keywords.include.length > 0 && (
                  <div class="space-x-2 select-none text-0">
                    <span class="text-4 text-base-800 font-bold mr2 keyword">包含关键词</span>
                    {keywords.include.map((i, idx) => (
                      <>
                        {idx > 0 && isComplicated && <span class="text-4 text-base-500">+</span>}
                        {Array.isArray(i) ? (
                          <>
                            {keywords.include.length > 1 && i.length > 1 && (
                              <span class="text-4 text-base-500">&#40;</span>
                            )}
                            {i.map((t, idx) => (
                              <>
                                {idx > 0 && <span class="text-4 text-base-500 mx1">|</span>}
                                {/* prettier-ignore */}
                                <span class="text-4 select-text underline underline-dotted underline-gray-500">{t}</span>
                              </>
                            ))}
                            {keywords.include.length > 1 && i.length > 1 && (
                              <span class="text-4 text-base-500">&#41;</span>
                            )}
                          </>
                        ) : (
                          <>
                            {/* prettier-ignore */}
                            <span class="text-4 select-text underline underline-dotted underline-gray-500">{i}</span>
                          </>
                        )}
                      </>
                    ))}
                  </div>
                )}
                {keywords.exclude.length > 0 && (
                  <div class="space-x-2 text-0">
                    {/* prettier-ignore */}
                    <span class="text-4 select-none text-base-800 font-bold mr2 inline-block">排除关键词</span>
                    {keywords.exclude.map((i) => (
                      <span class="text-4 select-text">{i}</span>
                    ))}
                  </div>
                )}
              </div>
            </>
          )}
          <ResourceTable resources={resources} />
          {(complete && page === 1) || (
            <Pagination page={page} href={(page) => `/resources/${page}${url.search}`} />
          )}
        </>
      ) : (
        <>
          <div class="h-20 text-2xl text-red-700/80 flex items-center justify-center">
            <span class="mr2 i-carbon-error" />
            <span>发生错误</span>
          </div>
        </>
      )
    }
  </div>

  <style>
    .keyword {
      display: inline-flex;
      justify-content: end;
    }
  </style>
</Layout>
