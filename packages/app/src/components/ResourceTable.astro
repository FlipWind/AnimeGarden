---
import type { Resource, ResourceType } from 'animegarden';

import { formatInTimeZone } from 'date-fns-tz';

import Tag from './Tag.astro';

export interface Props {
  resources: Resource[];
}

const { resources } = Astro.props;

const search = Astro.url.searchParams;

const DisplayType: Record<ResourceType, string> = {
  動畫: '动画',
  季度全集: '季度全集',
  音樂: '音乐',
  動漫音樂: '动漫音乐',
  同人音樂: '同人音乐',
  流行音樂: '流行音乐',
  日劇: '日剧',
  ＲＡＷ: 'RAW',
  其他: '其他',
  漫畫: '漫画',
  港台原版: '港台原版',
  日文原版: '日文原版',
  遊戲: '游戏',
  電腦遊戲: '电脑游戏',
  電視遊戲: '主机游戏',
  掌機遊戲: '掌机游戏',
  網絡遊戲: '网络游戏 ',
  遊戲周邊: '游戏周边',
  特攝: '特摄'
};

const DisplayTypeColor: Record<ResourceType, string> = {
  動畫: 'text-red-600',
  季度全集: 'text-red-700',
  漫畫: 'text-green-600',
  港台原版: 'text-green-600',
  日文原版: 'text-green-600',
  音樂: 'text-purple-600',
  動漫音樂: 'text-purple-600',
  同人音樂: 'text-purple-600',
  流行音樂: 'text-purple-600',
  日劇: 'text-blue-600',
  ＲＡＷ: '',
  遊戲: '',
  電腦遊戲: '',
  電視遊戲: '',
  掌機遊戲: '',
  網絡遊戲: '',
  遊戲周邊: '',
  特攝: 'text-rose-600',
  其他: 'text-base-800'
};

function getMirrorHref(href: string) {
  return `/resource/${href.split('/').at(-1)}`;
}

function followSearch(params: Record<string, string>) {
  const s = new URLSearchParams(search);
  for (const [key, value] of Object.entries(params)) {
    s.set(key, value);
  }
  return s.toString();
}
---

<div class="overflow-y-auto w-full">
  <table class="resources-table border-collapse min-y-[1080px] w-full">
    <thead class="resources-table-head text-lg border-b border-b-2">
      <tr class="">
        <th class="py3 w-[160px] min-w-[100px]">发布时间</th>
        <th class="py3 w-[80px]">类型</th>
        <th class="py3 text-left px2 min-w-[600px]">标题</th>
        <th class="py3">发布者</th>
        <th class="py3 w-[128px] text-left px2">下载</th>
      </tr>
    </thead>
    <tbody class="resources-table-body divide-y border-b text-sm"
      >{
        resources.map((r) => (
          <tr class="">
            <td class="py2 text-center">
              {formatInTimeZone(new Date(r.createdAt), 'Asia/Shanghai', 'yyyy-MM-dd HH:mm')}
            </td>
            <td class={`py2 px2 text-center text-base-600 ${DisplayTypeColor[r.type]}`}>
              {r.type in DisplayType ? DisplayType[r.type] : r.type}
            </td>
            <td class="py2 pl2">
              <div class="flex items-center justify-start">
                <div class="flex-1">
                  <a
                    href={getMirrorHref(r.href)}
                    class="text-link"
                    aria-label={`Go to resources detail of ${r.title}`}
                  >
                    {r.title}
                  </a>
                </div>
              </div>
            </td>
            <td class="py2 pl2 flex justify-center">
              {r.fansub ? (
                <a
                  href={`/resources/1?${followSearch({ fansub: r.fansub.id })}`}
                  class="block w-max"
                  aria-label={`Go to resources list of fansub ${r.fansub.name}`}
                >
                  <Tag text={r.fansub.name} className={`text-xs mr2 hover:bg-gray-300`} />
                </a>
              ) : r.publisher ? (
                <a
                  href={`/resources/1?${followSearch({ publisher: r.publisher.id })}`}
                  class="block w-max"
                  aria-label={`Go to resources list of publisher ${r.publisher.name}`}
                >
                  <Tag text={r.publisher.name} className={`text-xs mr2 hover:bg-gray-300`} />
                </a>
              ) : null}
            </td>
            <td class="py2 pl2">
              <div class="flex gap1 items-center justify-start">
                <a
                  href={r.magnet}
                  class="i-carbon-download text-2xl text-base-500 hover:text-base-900"
                  aria-label="Download resource"
                />
                <span class="text-xs text-base-400">{r.size}</span>
              </div>
            </td>
          </tr>
        ))
      }</tbody
    >
    <tfoot></tfoot>
  </table>
</div>
