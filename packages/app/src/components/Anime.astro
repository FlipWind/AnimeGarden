---
import type { FullBangumi } from 'bgmd/dist/types';
import { calendar as rawCalendar } from 'bgmd/calendar';
import { stringifySearchURL } from 'animegarden';

import { APP_HOST } from '~build/meta';

// Before 6:00
const first = (new Date(new Date().getTime() - 6 * 60 * 60 * 1000).getDay() + 6) % 7;
const calendar = rawCalendar.map((_, idx) => {
  const index = (idx + first) % 7;
  return {
    index: index + 1,
    text: ['一', '二', '三', '四', '五', '六', '日'][index],
    bangumis: rawCalendar[index]
      .filter((b) => !!getPosterImage(b))
      .sort((lhs, rhs) => {
        const getLanguage = (bgm: FullBangumi) => {
          const cn = ['国创', '国产动画', '国漫', '中国'];
          return bgm.bangumi?.tags.some((t) => cn.includes(t)) || bgm.bangumi?.name_cn === ''
            ? 1
            : 0;
        };
        const lang = getLanguage(lhs) - getLanguage(rhs);
        if (lang !== 0) return lang;
        return new Date(rhs.air_date).getTime() - new Date(lhs.air_date).getTime();
      })
  };
});

function getPosterImage(bgm: FullBangumi) {
  if (bgm.tmdb?.poster_path) {
    return `https://www.themoviedb.org/t/p/w300_and_h450_bestv2${bgm.tmdb.poster_path}`;
  } else if (bgm.bangumi?.images) {
    return bgm.bangumi.images.large;
  }
}

function getDisplayName(bgm: FullBangumi) {
  if (bgm.bangumi) {
    return bgm.bangumi.name_cn || bgm.name;
  }
  return bgm.name;
}

function getSearchURL(bgm: FullBangumi) {
  const url = stringifySearchURL('https://' + APP_HOST, {
    include: [[bgm.name, ...bgm.alias]],
    after: new Date(new Date(bgm.air_date).getTime() - 7 * 24 * 60 * 60 * 1000)
  });
  return `${url.pathname}${url.search}`;
}
---

<div class="space-y-4 w-full mb-8">
  {
    calendar.map((cal) => (
      <div class="bgm-weekday w-full pt-4 bg-gray-100 rounded-md" id={`星期${cal.text}`}>
        <a
          class="block px-6 text-xl font-bold mb-4 select-none border-l-[4px] border-[#0ca]"
          href={`#星期${cal.text}`}
        >
          星期{cal.text}
        </a>
        <div class="bgm-list-wrapper scroll-begin relative">
          <div class="bgm-list px-6 pb-2 flex w-full space-x-6 overflow-x-auto">
            {cal.bangumis.map((bgm) => (
              <a href={getSearchURL(bgm)} class="block w-max">
                <div class="w-150px h-225px flex items-center select-none">
                  <img
                    src={getPosterImage(bgm)}
                    alt=""
                    class="rounded-md max-h-225px hover:(shadow-box)"
                  />
                </div>
                <div class="w-150px truncate py-2">
                  <span class="font-bold text-sm text-link-active">{getDisplayName(bgm)}</span>
                </div>
              </a>
            ))}
          </div>

          <div class="scroll-left absolute top-[50%] translate-y-[-100%] left-7 select-none cursor-pointer">
            <div class="h-[40px] w-[40px] rounded-full bg-gray-300 op-90 flex items-center justify-center">
              <i class="i-carbon-arrow-left text-2xl font-bold" />
            </div>
          </div>
          <div class="scroll-right absolute top-[50%] translate-y-[-100%] right-7 select-none cursor-pointer">
            <div class="h-[40px] w-[40px] rounded-full bg-gray-300 op-90 flex items-center justify-center">
              <i class="i-carbon-arrow-right text-2xl font-bold" />
            </div>
          </div>
        </div>
      </div>
    ))
  }
</div>

<style is:global>
  .bgm-list-wrapper.scroll-begin .scroll-left {
    display: none;
  }

  .bgm-list-wrapper.scroll-end .scroll-right {
    display: none;
  }

  @media (hover: none) {
    .scroll-left,
    .scroll-right {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const wrappers = Array.from(document.querySelectorAll('.bgm-weekday .bgm-list-wrapper'));
    for (const wrapper of wrappers) {
      const container = wrapper.querySelector('.bgm-list')!;
      if (!container) continue;

      const handler = () => {
        if (container.scrollLeft < 1) {
          wrapper.classList.add('scroll-begin');
        } else {
          wrapper.classList.remove('scroll-begin');
        }

        if (Math.abs(container.scrollWidth - container.clientWidth - container.scrollLeft) < 1) {
          wrapper.classList.add('scroll-end');
        } else {
          wrapper.classList.remove('scroll-end');
        }
      };
      handler();

      container.addEventListener('scroll', () => {
        handler();
      });

      const scrollLeft = () => {
        if (container.scrollLeft - 500 < 51) {
          container.scrollBy({ left: -550, behavior: 'smooth' });
        } else {
          container.scrollBy({ left: -500, behavior: 'smooth' });
        }
      };
      const scrollRight = () => {
        if (
          Math.abs(container.scrollWidth - container.clientWidth - (container.scrollLeft + 500)) <
          50
        ) {
          container.scrollBy({ left: 550, behavior: 'smooth' });
        } else {
          container.scrollBy({ left: 500, behavior: 'smooth' });
        }
      };

      wrapper.querySelector('.scroll-left')?.addEventListener('mousedown', () => {
        scrollLeft();
      });
      wrapper.querySelector('.scroll-right')?.addEventListener('mousedown', () => {
        scrollRight();
      });
    }
  });
</script>
